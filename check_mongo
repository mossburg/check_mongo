#!/usr/bin/env python
 
import getopt
import sys
import pymongo
 
try:
    from pymongo.son import SON
except ImportError:
    from bson.son import SON
 
##
# Main
##
def main(argv):
  try:
    opts, args = getopt.getopt(argv, "H:P:c:w:A:", ["host=", "port=", "critical=", "warn=", "action="])
  except getopt.GetoptError:
    usage()
    sys.exit(2)
 
  server_hostname = 'default'
  critical_thresh = 60
  warning_thresh = 30
  server_port = 27017
  action = 'default'
 
  for opt, arg in opts:
    if opt in ("-H", "--host"):
      server_hostname = arg
    elif opt in ("-P", "--port"):
      server_port = int(arg)
    elif opt in ("-c", "--critical"):
      critical_thresh = int(arg)
    elif opt in ("-w", "--warning"):
      warning_thresh = int(arg)
    elif opt in ("-A", "--action"):
      action = arg
 
  if 'default' in (server_hostname, action):
    usage()
    sys.exit(2)
 
  if action == "connect":
    connect_test(server_hostname, server_port, critical_thresh, warning_thresh)
  elif action == "slavelag":
    slave_lag_test(server_hostname, server_port, critical_thresh, warning_thresh)
  elif action == "count":
    operation_count_test(server_hostname, server_port, critical_thresh, warning_thresh)
  elif action == "long":
    long_running_test(server_hostname, server_port, critical_thresh, warning_thresh)
  elif action == "replset":
    replica_set_test(server_hostname, server_port, critical_thresh, warning_thresh)
  else:
    usage();
    sys.exit(2)
 
##
# Usage
##
def usage():
  print "Usage: ./check_mongo -H <hostname> -A <action> -P <port> -c <critical threshold> -w <warning threshold>"
  print "Possible actions:"
  print " - connect - Attempt to connect with the mongo instance"
  print " -- Takes a critical thresh for connection timeout and ignores the warning threshold"
  print " - slavelag - Check slave status to ensure its not lagging to far behind"
  print " -- Takes warning/critical thresholds for seconds behind master"
  print " - count - Check the number of MongoDB operations"
  print " -- Takes warning/critical thresholds for number of active ops"
  print " - long - Checks for long running queries"
  print " -- Takes warning/critical thresholds for seconds running"
  print " - replset - Checks replica set cluster health"
  print " -- Takes warning/critical values for number of members not considered healthy"
  print "NOTE: At least Hostname And Action arguments are required"
 
##
# Check for long running operations
#
def long_running_test(hostname, port, critical, warning):
  try:
    con = pymongo.Connection(hostname, port, slave_okay=True, network_timeout=30)
  except pymongo.errors.ConnectionFailure:
    print "CRITICAL - Connection to mongo failed"
    sys.exit(2)
 
  db = con.admin
  ret = db["$cmd"].sys.inprog.find_one();
  max_seconds = 0
 
  if len(ret['inprog']) == 0:
    print "OK - No Ops Lagging"
    sys.exit(0)
 
  for op in ret['inprog']:
    if 'secs_running' in op.keys():
      if op['secs_running'] > max_seconds:
        max_seconds = op['secs_running']
 
  if max_seconds > critical:
    print "CRITICAL - Op running for " + str(max_seconds) + " seconds"
    sys.exit(2)
  elif max_seconds > warning:
    print "WARNING - Op running for " + str(max_seconds) + " seconds"
    sys.exit(1)
  else:
    print "OK - No Ops Lagging"
    sys.exit(0)
 
##
# Check the count of active operations
##
def operation_count_test(hostname, port, critical, warning):
  try:
    con = pymongo.Connection(hostname, port, slave_okay=True, network_timeout=30)
  except pymongo.errors.ConnectionFailure:
    print "CRITICAL - Connection to mongo failed"
    sys.exit(2)
 
  db = con.admin
  ret = db["$cmd"].sys.inprog.find_one();
  count = len(ret['inprog'])
  if count > critical:
    print "CRITICAL - Operation Count " + str(count)
    sys.exit(2)
  elif len(ret['inprog']) > warning:
    print "WARNING - Operation Count " + str(count)
    sys.exit(1)
  else:
    print "OK - Operation Count " + str(count)
    sys.exit(0)
 
##
# Check that we can connect
##
def connect_test(hostname, port, critical, warning):
  try:
    con = pymongo.Connection(hostname, port, slave_okay=True, network_timeout=critical)
  except pymongo.errors.ConnectionFailure:
    print "CRITICAL - Connection to mongo failed"
    sys.exit(2)
 
  print "OK - Connect accepted"
  sys.exit(0)
 
##
# Check if the slave thread is lagging. This only supports master/slave, not replica sets.
##
def slave_lag_test(hostname, port, critical, warning):
  try:
    con = pymongo.Connection(hostname, port, slave_okay=True, network_timeout=30)
  except pymongo.errors.ConnectionFailure:
    print "CRITICAL - Connection to mongo failed"
    sys.exit(2)
 
  ret = con.admin.command(SON([('serverStatus', 1), ('repl', 2)]))
 
  try:
    seconds = int(ret['repl']['sources'][0]['lagSeconds'])
  except (KeyError, IndexError):
    print "UNKNOWN - We can't find lag seconds, wrong version or perhaps you specified the master?"
    sys.exit(3)
 
  if  seconds > critical:
    print "CRITICAL - Replication lagging " + str(seconds) + " seconds behind."
    sys.exit(2)
  elif seconds > warning:
    print "WARNING - Replication lagging " + str(seconds) + " seconds behind."
    sys.exit(1)
  else:
    print "OK - Replication in sync"
    sys.exit(0)

##
# Check if the replica set cluster members are non-healthy
##
def replica_set_test(hostname, port, critical, warning):
  try:
    con = pymongo.Connection(hostname, port, network_timeout=30)
  except pymongo.errors.ConnectionFailure:
    print "CRITICAL - Connection to mongo failed"
    sys.exit(2)

  members_ok = []
  members_ko = []
  ret = con.admin.command(SON([('replSetGetStatus', 1)]))
  try:
    members = ret['members']

    for member in members:
      if member['health'] == 1:
        members_ok.append(member['name'])
      else:
        members_ko.append(member['name'])

    num_ok = len(members_ok) 
    num_ko = len(members_ko)

  except (KeyError, IndexError):
    print "UNKNOWN - We can't find cluster members"
    sys.exit(3)
  
  if len(members_ko) != 0:
    list_ko = '( non-healthy members:'
    for member in members_ko:
      list_ko = list_ko + ' ' + member
    list_ko = list_ko + ' )'
  else:
    list_ko = ''

  if  num_ko >= critical:
    print "CRITICAL - " + str(num_ok) + " members in the cluster " + str(list_ko)
    sys.exit(2)
  elif num_ko >= warning:
    print "WARNING - " + str(num_ok) + " members in the cluster " + str(list_ko)
    sys.exit(1)
  else:
    print "OK - " + str(num_ok) + " members in the cluster " + str(list_ko)
    sys.exit(0)

##
# Main
##
if __name__ == "__main__":
    main(sys.argv[1:])